{"version":3,"file":"main.min.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;ACVa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA,SAAS;AACT,8CAA8C,aAAa,SAAS,KAAK;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mCAAmC;AACnC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA,KAAK;AACL;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,gBAAgB,gCAAgC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,uDAAuD,YAAY;AACnE,KAAK;AACL;AACA,kBAAkB","sources":["webpack://dollarSigns/webpack/universalModuleDefinition","webpack://dollarSigns/./src/twodollars.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"dollarSigns\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dollarSigns\"] = factory();\n\telse\n\t\troot[\"dollarSigns\"] = factory();\n})(global, function() {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.twoDollars = void 0;\nconst d = document;\nconst dp = new DOMParser();\nconst twoDollars = {\n    create: (element, attributes) => {\n        const $element = d.createElement(element.slice(1, -2));\n        attributes &&\n            Object.keys(attributes).forEach((key) => $element.setAttribute(key, attributes[key]));\n        return $element;\n    },\n    find: (selector, target = document.documentElement) => {\n        const elements = Array.from(target.querySelectorAll(selector));\n        return ((elements.length ? elements : [document.documentElement]));\n    },\n    append: (toAppend, target) => {\n        target.appendChild(toAppend);\n        return twoDollars;\n    },\n    measure: (str, fontSize) => {\n        const $helper = twoDollars.create(\"<span/>\", { innerText: str });\n        twoDollars.css($helper, {\n            position: \"absolute\",\n            left: \"-9999px\",\n            top: \"-9999px\",\n        });\n        fontSize && twoDollars.css($helper, { fontSize: `${fontSize}px` });\n        document.body.appendChild($helper);\n        const measures = {\n            h: $helper.clientHeight,\n            w: $helper.clientWidth,\n        };\n        document.body.removeChild($helper);\n        return measures;\n    },\n    parse: (str) => dp.parseFromString(str, \"text/html\"),\n    css: ($element, props) => {\n        props &&\n            Object.keys(props).forEach((key) => $element.style.setProperty(key, props[key]));\n        return twoDollars;\n    },\n    parent: ($element, selector) => {\n        if (!selector)\n            return $element.parentNode;\n        const selectorMatch = ($elm, sel) => $elm.matches(sel)\n            ? $elm\n            : selectorMatch($elm.parentNode, sel);\n        return selectorMatch($element.parentNode, selector);\n    },\n    hasClass: (element, cn) => element.classList.contains(cn),\n    addClass: (element, cn) => {\n        !element.classList.contains(cn) && element.classList.add(cn);\n        return twoDollars;\n    },\n    removeClass: (element, cn) => {\n        element.classList.contains(cn) && element.classList.remove(cn);\n        return twoDollars;\n    },\n    toggleClass: (element, cn) => {\n        element.classList.toggle(cn);\n        return twoDollars;\n    },\n    addAttr: (element, attributes) => {\n        attributes &&\n            Object.keys(attributes).forEach((key) => element.setAttribute(key, attributes[key]));\n        return twoDollars;\n    },\n    ucFirst: (str) => str.charAt(0).toUpperCase() + str.slice(1),\n    extend: (target, extension = {}) => {\n        Object.keys(extension).forEach((key) => (target[key] = extension[key]));\n        return target;\n    },\n    index: ($element) => {\n        const $parent = $element.parentNode;\n        return Array.prototype.indexOf.call($parent.childNodes, $element);\n    },\n    listen: (event) => {\n        const { handler, target, type } = event;\n        target.addEventListener(type, handler);\n        return twoDollars;\n    },\n    destroy: (event) => {\n        const { handler, target, type } = event;\n        if (handler)\n            target.removeEventListener(type, handler);\n        return twoDollars;\n    },\n    post: (url, data) => {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"POST\", url, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhr.send(JSON.stringify(data));\n            xhr.onload = () => resolve(xhr.responseText);\n            xhr.onerror = (error) => reject(error);\n        });\n    },\n    preload: (opt) => {\n        const { items, onFileLoaded, onFinish } = opt;\n        const toLoad = items.length;\n        const supported = [\"jpg\", \"png\"];\n        let loaded = 0;\n        items.forEach((item) => {\n            const type = item.split(\".\").pop();\n            if (type && supported.indexOf(type) === -1)\n                return;\n            const img = new Image();\n            img.onload = () => {\n                if (++loaded === toLoad)\n                    onFinish(toLoad);\n                else\n                    onFileLoaded(img.getAttribute(\"src\") || \"\");\n            };\n            img.src = item;\n        });\n    },\n    history: {\n        go: (name, path) => window.history.pushState({ site: name }, \"\", path),\n    },\n};\nexports.twoDollars = twoDollars;\n"],"names":[],"sourceRoot":""}