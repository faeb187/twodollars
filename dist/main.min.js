/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!***************************!*\
  !*** ./src/twodollars.ts ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$$": () => (/* binding */ $$)
/* harmony export */ });
var d = document;
var dp = new DOMParser();
var $$ = {
    create: function (element, attributes) {
        var $element = d.createElement(element.slice(1, -2));
        attributes &&
            Object.keys(attributes).forEach(function (key) {
                return $element.setAttribute(key, attributes[key]);
            });
        return $element;
    },
    find: function (selector, target) {
        if (target === void 0) { target = document.body; }
        return Array.from(target.querySelectorAll(selector));
    },
    append: function (toAppend, target) {
        target.appendChild(toAppend);
        return $$;
    },
    measure: function (str, fontSize) {
        var $helper = $$.create("<span/>", { innerText: str });
        $$.css($helper, {
            position: "absolute",
            left: "-9999px",
            top: "-9999px",
        });
        fontSize && $$.css($helper, { fontSize: fontSize + "px" });
        document.body.appendChild($helper);
        var measures = {
            h: $helper.clientHeight,
            w: $helper.clientWidth,
        };
        document.body.removeChild($helper);
        return measures;
    },
    parse: function (str) { return dp.parseFromString(str, "text/html"); },
    css: function ($element, props) {
        props &&
            Object.keys(props).forEach(function (key) {
                return $element.setAttribute("styles", key + ": " + props[key]);
            });
        return $$;
    },
    parent: function ($element, selector) {
        if (!selector)
            return $element.parentNode;
        var selectorMatch = function ($elm, sel) {
            return $elm.matches(sel)
                ? $elm
                : selectorMatch($elm.parentNode, sel);
        };
        return selectorMatch($element.parentNode, selector);
    },
    hasClass: function (element, cn) {
        return element.classList.contains(cn);
    },
    addClass: function (element, cn) {
        !element.classList.contains(cn) && element.classList.add(cn);
        return $$;
    },
    removeClass: function (element, cn) {
        element.classList.contains(cn) && element.classList.remove(cn);
        return $$;
    },
    toggleClass: function (element, cn) {
        element.classList.toggle(cn);
        return $$;
    },
    addAttr: function (element, attributes) {
        attributes &&
            Object.keys(attributes).forEach(function (key) {
                return element.setAttribute(key, attributes[key]);
            });
        return $$;
    },
    ucFirst: function (str) { return str.charAt(0).toUpperCase() + str.slice(1); },
    extend: function (target, extension) {
        if (extension === void 0) { extension = {}; }
        Object.keys(extension).forEach(function (key) { return (target[key] = extension[key]); });
        return target;
    },
    index: function ($element) {
        var $parent = $element.parentNode;
        return Array.prototype.indexOf.call($parent.childNodes, $element);
    },
    listen: function (event) {
        var handler = event.handler, target = event.target, type = event.type;
        target.addEventListener(type, handler);
        return $$;
    },
    destroy: function (event) {
        var handler = event.handler, target = event.target, type = event.type;
        if (handler)
            target.removeEventListener(type, handler);
        return $$;
    },
    post: function (url, data) {
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.send(JSON.stringify(data));
            xhr.onload = function () { return resolve(xhr.responseText); };
            xhr.onerror = function (error) { return reject(error); };
        });
    },
    preload: function (opt) {
        var items = opt.items, onFileLoaded = opt.onFileLoaded, onFinish = opt.onFinish;
        var toLoad = items.length;
        var supported = ["jpg", "png"];
        var loaded = 0;
        items.forEach(function (item) {
            var type = item.split(".").pop();
            if (type && supported.indexOf(type) === -1)
                return;
            var img = new Image();
            img.onload = function () {
                if (++loaded === toLoad)
                    onFinish(toLoad);
                else
                    onFileLoaded(img.getAttribute("src") || "");
            };
            img.src = item;
        });
    },
    history: {
        go: function (name, path) {
            return window.history.pushState({ site: name }, "", path);
        },
    },
};


/******/ })()
;
//# sourceMappingURL=main.min.js.map