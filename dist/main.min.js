(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("dollarSigns", [], factory);
	else if(typeof exports === 'object')
		exports["dollarSigns"] = factory();
	else
		root["dollarSigns"] = factory();
})(global, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/***/ ((module) => {



var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key);
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return target.propertyIsEnumerable(symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

module.exports = deepmerge_1;


/***/ }),

/***/ "./src/twodollars.ts":
/*!***************************!*\
  !*** ./src/twodollars.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.twoDollars = void 0;
const deepmerge_1 = __importDefault(__webpack_require__(/*! deepmerge */ "./node_modules/deepmerge/dist/cjs.js"));
const d = document;
const dp = new DOMParser();
const twoDollars = {
    create: (element, attributes) => {
        const $element = d.createElement(element.slice(1, -2));
        attributes &&
            Object.keys(attributes).forEach((key) => $element.setAttribute(key, attributes[key]));
        return $element;
    },
    find: (selector, target = d.body) => {
        return selector === "html"
            ? [d.documentElement]
            : Array.from(target.querySelectorAll(selector));
    },
    append: (toAppend, target) => {
        target.appendChild(toAppend);
        return twoDollars;
    },
    css: ($element, props) => {
        props &&
            Object.keys(props).forEach((key) => $element.style.setProperty(key, props[key]));
        return twoDollars;
    },
    history: {
        go: (name, path) => window.history.pushState({ site: name }, "", path),
    },
    measure: (str, fontSize) => {
        const $helper = twoDollars.create("<span/>", { innerText: str });
        twoDollars.css($helper, {
            position: "absolute",
            left: "-9999px",
            top: "-9999px",
        });
        fontSize && twoDollars.css($helper, { fontSize: `${fontSize}px` });
        document.body.appendChild($helper);
        const measures = {
            h: $helper.clientHeight,
            w: $helper.clientWidth,
        };
        document.body.removeChild($helper);
        return measures;
    },
    parse: (str) => dp.parseFromString(str, "text/html"),
    parent: ($element, selector) => {
        if (!selector)
            return $element.parentNode;
        const selectorMatch = ($elm, sel) => $elm.matches(sel)
            ? $elm
            : selectorMatch($elm.parentNode, sel);
        return selectorMatch($element.parentNode, selector);
    },
    hasClass: (element, cn) => element.classList.contains(cn),
    addClass: (element, cn) => {
        !element.classList.contains(cn) && element.classList.add(cn);
        return twoDollars;
    },
    removeClass: (element, cn) => {
        element.classList.contains(cn) && element.classList.remove(cn);
        return twoDollars;
    },
    toggleClass: (element, cn) => {
        element.classList.toggle(cn);
        return twoDollars;
    },
    addAttr: (element, attributes) => {
        attributes &&
            Object.keys(attributes).forEach((key) => element.setAttribute(key, attributes[key]));
        return twoDollars;
    },
    ucFirst: (str) => str.charAt(0).toUpperCase() + str.slice(1),
    merge: (obj1, obj2) => deepmerge_1.default(obj1, obj2),
    index: ($element) => {
        const $parent = $element.parentNode;
        return Array.prototype.indexOf.call($parent.childNodes, $element);
    },
    post: (url, data) => {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.send(JSON.stringify(data));
            xhr.onload = () => resolve(xhr.responseText);
            xhr.onerror = (error) => reject(error);
        });
    },
    preload: (opt) => {
        const { items, onFileLoaded, onFinish } = opt;
        const toLoad = items.length;
        const supported = ["jpg", "png"];
        let loaded = 0;
        items.forEach((item) => {
            const type = item.split(".").pop();
            if (type && supported.indexOf(type) === -1)
                return;
            const img = new Image();
            img.onload = () => {
                if (++loaded === toLoad)
                    onFinish(toLoad);
                else
                    onFileLoaded(img.getAttribute("src") || "");
            };
            img.src = item;
        });
    },
};
exports.twoDollars = twoDollars;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/twodollars.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=main.min.js.map