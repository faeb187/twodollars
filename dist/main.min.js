/*! For license information please see main.min.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./src/twodollars.ts":(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports["default"] = (() => {\n    const d = document;\n    const dp = new DOMParser();\n    const $$ = {\n        create: (element, attributes) => {\n            const $element = d.createElement(element.slice(1, -2));\n            attributes &&\n                Object.keys(attributes).forEach((key) => $element.setAttribute(key, attributes[key]));\n            return $element;\n        },\n        find: (selector, target = document.body) => Array.from(target.querySelectorAll(selector)),\n        append: (toAppend, target) => {\n            target.appendChild(toAppend);\n            return $$;\n        },\n        measure: (str, fontSize) => {\n            const $helper = $$.create("<span/>", { innerText: str });\n            $$.css($helper, {\n                position: "absolute",\n                left: "-9999px",\n                top: "-9999px",\n            });\n            fontSize && $$.css($helper, { fontSize: `${fontSize}px` });\n            document.body.appendChild($helper);\n            const measures = {\n                h: $helper.clientHeight,\n                w: $helper.clientWidth,\n            };\n            document.body.removeChild($helper);\n            return measures;\n        },\n        parse: (str) => dp.parseFromString(str, "text/html"),\n        css: ($element, props) => {\n            props &&\n                Object.keys(props).forEach((key) => $element.setAttribute("styles", `${key}: ${props[key]}`));\n            return $$;\n        },\n        parent: ($element, selector) => {\n            if (!selector)\n                return $element.parentNode;\n            const selectorMatch = ($elm, sel) => $elm.matches(sel)\n                ? $elm\n                : selectorMatch($elm.parentNode, sel);\n            return selectorMatch($element.parentNode, selector);\n        },\n        hasClass: (element, cn) => element.classList.contains(cn),\n        addClass: (element, cn) => {\n            !element.classList.contains(cn) && element.classList.add(cn);\n            return $$;\n        },\n        removeClass: (element, cn) => {\n            element.classList.contains(cn) && element.classList.remove(cn);\n            return $$;\n        },\n        toggleClass: (element, cn) => {\n            element.classList.toggle(cn);\n            return $$;\n        },\n        addAttr: (element, attributes) => {\n            attributes &&\n                Object.keys(attributes).forEach((key) => element.setAttribute(key, attributes[key]));\n            return $$;\n        },\n        ucFirst: (str) => str.charAt(0).toUpperCase() + str.slice(1),\n        extend: (target, extension = {}) => {\n            Object.keys(extension).forEach((key) => (target[key] = extension[key]));\n            return target;\n        },\n        index: ($element) => {\n            const $parent = $element.parentNode;\n            return Array.prototype.indexOf.call($parent.childNodes, $element);\n        },\n        listen: (event) => {\n            const { handler, target, type } = event;\n            target.addEventListener(type, handler);\n            return $$;\n        },\n        destroy: (event) => {\n            const { handler, target, type } = event;\n            if (handler)\n                target.removeEventListener(type, handler);\n            return $$;\n        },\n        post: (url, data) => {\n            return new Promise((resolve, reject) => {\n                const xhr = new XMLHttpRequest();\n                xhr.open("POST", url, true);\n                xhr.setRequestHeader("Content-Type", "application/json");\n                xhr.send(JSON.stringify(data));\n                xhr.onload = () => resolve(xhr.responseText);\n                xhr.onerror = (error) => reject(error);\n            });\n        },\n        preload: (opt) => {\n            const { items, onFileLoaded, onFinish } = opt;\n            const toLoad = items.length;\n            const supported = ["jpg", "png"];\n            let loaded = 0;\n            items.forEach((item) => {\n                const type = item.split(".").pop();\n                if (type && supported.indexOf(type) === -1)\n                    return;\n                const img = new Image();\n                img.onload = () => {\n                    if (++loaded === toLoad)\n                        onFinish(toLoad);\n                    else\n                        onFileLoaded(img.getAttribute("src") || "");\n                };\n                img.src = item;\n            });\n        },\n        history: {\n            go: (name, path) => window.history.pushState({ site: name }, "", path),\n        },\n    };\n    return $$;\n})();\n\n\n//# sourceURL=webpack://twodollars/./src/twodollars.ts?')}},__webpack_exports__={};__webpack_modules__["./src/twodollars.ts"](0,__webpack_exports__)})();